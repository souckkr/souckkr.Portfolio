'''
# 탐욕법(Greedy Algorithm)이란?

* 탐욕 알고리즘 : 매순간 최적이라고 생각되는 것을 선택해 나가는 방식으로 진행하여 최종적인 최적해에 도달하는 기법
* 탐욕 알고리즘의 속성
1. greedy choice property : 앞의 선택이 이후 선택에 영향을 주지 않음
2. optimal substructure : 문제 전체에 대한 최적해(global optimum)가 부분문제에 대해서도 역시 최적해가 되는 것.

* 분할가능 배낭문제(Fractional knapsack problem)
1. 한 여행가가 가지고 가는 배낭에 담을 수 있는 무게의 최댓값이 정해져 있음
2. 일정 가치와 무게가 있는 짐들을 배낭에 넣을 때 가치의 합이 최대가 되도록 짐을 고르는 방법을 찾는 문제
3. 짐을 쪼갤 수 있음

- 해결방법
  1. 단위 무게당 값어치가 가장 큰 짐을 먼저 넣는다.
  2. 순간순간의 선택이 이후 선택에 영향을 주지 않고, 순간순간의 최적 선택이 전체 문제 최적해와 일치 -> 1,2번 속성 전부 만족

- 짐을 쪼갤 수 없는 경우 : 0-1 배낭문제(0-1 Knapsack Problem)
짐을 쪼갤 수 없기 때문에 가능한 모든 조합에 대해 일일이 따져본 후에 가치의 합이 최대가 되도록 하는 조합을 찾는 문제가 되는데, 이 때는 동적계획법(dynamic programming)으로 문제를 풀게 됩니다. 다시 말해 모든 경우의 수를 따져보되 중간계산 결과를 저장해 두었다가 이를 다시 써먹는 방식으로 계산량 감소를 유도하는 전략입니다.


'''




# 내풀이
def solution(number, k):
    answer = ''
    number= list(number)
    line = len(number) -  k
    print(line)
    i = 0
    while len(number) > line:        
        if number[i] < number[i+1]:
            number.pop(i)
            i -=1
        else:
            i +=1
        if i == line:
            number.pop(i)
            i -=1
        print(number)
    return ''.join(number)

## 테스트 케이스 10번 통과 못함
